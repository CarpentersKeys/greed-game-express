todo!

    app.js 
        figure out how to loop round stages in patientReducer without rechallenging
        just chain two patientReducers?

    util
        should I add patientReducer to Array.prototype? 

    valiudation fn:
        refactor role validation
    
    gamefunction: 
        game result reducde
        startstage


    ui
        prepare fs for ui clients (rename app.js to game.js?)
        setup appjs for discord
        build slash commands
            challenge
            quit game
        build messages
        build event listeners

questions: 
    FP allow global constants? 
        NO
    how to handle exceptions with FP
    do I need to pass UI functions into async handlers to maintain promiseFirst pattern
    at what point do I want to filter the player objects and what do I need from them?
    can I reset the index of a reducer?

async needs:
    issue challenge
    accept challenge
    waiting for selectTime
    waiting for race

game flow
    -issue challenge (some setup can begin)
    -async accept challenge
    -finish setup
    -asynch selectTime
    -async race
    -get results


patterns used:
    for functions that require UI and async interactions: promiseFirst
        intialize promise/event handlers that await the interactions
        send UI messages or whatever
    function params:
        receive a functionNameResult object desctructure in the params
        if the full object is needed to be passed into a subfn use arguments[0]

refactor ideas:
    get all stages as an array of function
    call playRound recursively on a patientReducer implementation 

theme:
    prisoners dilemma
       at the end both players can choose if they want to play again, if they both choose to play again another round is started, if one choses to and the other doesn't, that player sthsthsth